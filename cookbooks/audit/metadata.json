{"name":"audit","version":"5.0.3","description":"Allows for fetching and executing compliance profiles, and reporting its results","long_description":"# audit cookbook\n[![Cookbook Version](http://img.shields.io/cookbook/v/audit.svg)][cookbook] [![Build Status](http://img.shields.io/travis/chef-cookbooks/audit.svg)][travis]\n\nThe `audit` cookbook allows you to run InSpec profiles as part of a Chef Client run. It downloads configured profiles from various sources like Chef Compliance, Chef Supermarket or Git and reports audit runs to Chef Compliance or Chef Automate.\n\n## Quickstart\n\nThe `audit` cookbook supports a number of different reporters and fetchers which can be confusing. Please see the [supported configurations documentation](https://github.com/chef-cookbooks/audit/blob/master/docs/supported_configuration.md) which has a few copy/paste examples to get you started quickly.\n\n## Requirements\n\n### Chef\n\n- Chef Client >=12.5.1\n\n### Support Matrix\n\n#### Chef Automate\n\n| Automate version   | InSpec version   | Audit Cookbook version   |\n|--------------------|------------------|--------------------------|\n|   < 0.8.0          |   ≤ 1.23.0       |   ≤ 3.1.0                |\n|   ≥ 0.8.0          |   ≥ 1.24.0       |   ≥ 4.0.0                |\n\n#### Chef Compliance\n\n| Chef Compliance version    | InSpec version    | Audit Cookbook version    |\n|----------------------------|-------------------|---------------------------|\n|   ≤ 1.1.23                 |   = 0.20.1        |   = 0.7.0                 |\n|   > 1.1.23                 |   ≥ 0.22.1        |   = 0.8.0                 |\n|   ≥ 1.6.8                  |   ≥ 1.2.0         |   > 1.0.2                 |\n\n\n## Deprecation Note:\n\n### Please use `reporter` instead of `collector` attribute\n\nWith version 3.1.0 the use of the `collector` attribute is deprecated. Please use `reporter` instead. The `collector` attribute will be removed in the next major version.\n\n```\n\"audit\": {\n  \"collector\": \"chef-server-compliance\",\n```\n\nbecomes:\n\n```\n\"audit\": {\n  \"reporter\": \"chef-server-compliance\",\n```\n\n### Use `chef-server-automate` and `chef-automate` instead of `chef-server-visibility` and `chef-visibility`\n\nWith version 3.1.0 the reporter attribute deprecates the values `chef-server-visibility` and `chef-visibility`. They have been renamed:\n\n * `chef-server-visibility` => `chef-server-automate`\n * `chef-visibility` => `chef-automate`\n\nThe support for values `chef-server-visibility` and `chef-visibility` will be removed in the next major version.\n\n\n## Overview\n\n### Component Architecture\n```\n ┌──────────────────────┐    ┌──────────────────────┐    ┌─────────────────────┐\n │     Chef Client      │    │   Chef Server Proxy  │    │   Chef Compliance   │\n │                      │    │      (optional)      │    │   or Chef Automate  │\n │ ┌──────────────────┐ │    │                      │    │                     │\n │ │                  │◀┼────┼──────────────────────┼────│  Profiles           │\n │ │  audit cookbook  │ │    │                      │    │                     │\n │ │                  │─┼────┼──────────────────────┼───▶│  Reports            │\n │ └──────────────────┘ │    │                      │    │                     │\n │                      │    │                      │    │                     │\n └──────────────────────┘    └──────────────────────┘    └─────────────────────┘\n```\n\nInspec Profiles can be hosted from a variety of locations:\n\n```\n ┌──────────────────────┐                                ┌─────────────────────┐\n │     Chef Client      │     ┌───────────────────────┐  │   Chef Compliance   │\n │                      │  ┌──│ Profiles(Supermarket, │  │   or Chef Automate  │\n │ ┌──────────────────┐ │  │  │ Github, local, etc)   │  │                     │\n │ │                  │◀┼──┘  └───────────────────────┘  │                     │\n │ │  audit cookbook  │◀┼────────────────────────────────│  Profiles           │\n │ │                  │─┼───────────────────────────────▶│  Reports            │\n │ └──────────────────┘ │                                │                     │\n │                      │                                │                     │\n └──────────────────────┘                                └─────────────────────┘\n```\n\n## Usage\n\nThe audit cookbook needs to be configured for each node where the `chef-client` runs. The `audit` cookbook can be reused for all nodes, all node-specific configuration is done via Chef attributes.\n\n### InSpec Gem Installation\n\nBeginning with version 3.x of the `audit` cookbook, the cookbook will first check to see if InSpec is already installed. If it is, it will not attempt to install it. Future releases of the Chef omnibus package are expected to include InSpec so this will reduce audit run times and also ensure that Chef users in air-gapped or firewalled environments can still use the `audit` cookbook without requiring gem mirrors, etc.\n\nAlso beginning with version 3.x of the `audit` cookbook, the default version of the InSpec gem to be installed (if it isn't already installed) is the latest version. Prior versions of the `audit` cookbook were version-locked to `inspec` version 1.15.0.\n\nTo install a different version of the InSpec gem, or to force installation of the gem, set the `node['audit']['inspec_version']` attribute to the version you wish to be installed.\n\n### Configure node\n\nOnce the cookbook is available in Chef Server, you need to add the `audit::default` recipe to the run-list of each node. The profiles are selected via the `node['audit']['profiles']` attribute. A complete list of the possible configuration are documented in [Supported Configurations](docs/supported_configuration.md). For example you can define the attributes in a role or environment file like this:\n\n\nnode.default['audit']['profiles'].push(\"path\": \"#{PROFILES_PATH}/mylinux-failure-success\")\n\n```ruby\n\"audit\": {\n  \"reporter\": \"chef-server-compliance\",\n  \"inspec_version\": \"1.29.0\",\n  \"profiles\": [\n    # profile from Chef Compliance\n    {\n      \"name\": \"linux\",\n      \"compliance\": \"base/linux\"\n    },\n    # profile from supermarket\n    # note: If reporting to Compliance, the Supermarket profile needs to be uploaded to Chef Compliance first\n    {\n      \"name\": \"ssh\",\n      \"supermarket\": \"hardening/ssh-hardening\"\n    },\n    # local Windows path\n    {\n      \"name\": \"brewinc/win2012_audit\",\n      # filesystem path\n      \"path\": \"E:/profiles/win2012_audit\"\n    },\n    # github\n    {\n      \"name\": \"ssl\",\n      \"git\": \"https://github.com/dev-sec/ssl-benchmark.git\"\n    },\n    # url\n    {\n      \"name\": \"ssh\",\n      \"url\": \"https://github.com/dev-sec/tests-ssh-hardening/archive/master.zip\"\n    }\n  ]\n}\n```\n\nYou can also configure in a policyfile like this:\n\n```ruby\ndefault[\"audit\"] = {\n  \"reporter\" => \"chef-server-compliance\",\n  \"profiles\" => [\n    {\n      \"name\": \"linux\",\n      \"compliance\": \"base/linux\"\n    },\n    {\n      \"name\": \"ssh\",\n      \"compliance\": \"base/ssh\"\n    }\n  ]\n}\n```\n\n#### Attributes\n\nYou can also pass in [InSpec Attributes](https://www.inspec.io/docs/reference/profiles/) to your audit run. You do this by defining the attributes here:\n\n```ruby\ndefault['audit']['attributes'] = {\n  first_attribute: 'some vaule',\n  second_attribute: 'another value',\n}\n```\n\n### Reporting\n\n#### Reporting to Chef Automate via Chef Server\n\nIf you want the audit cookbook to retrieve compliance profiles and report to Chef Automate (Visibility) through Chef Server, set the `reporter` and `profiles` attributes.\n\nThis requires Chef Client >= 12.16.42.  Also requires Chef Server version 12.11.1 and Chef Automate 0.6.6 or newer, as well as integration between the two. More details [here](https://docs.chef.io/integrate_compliance_chef_automate.html#collector-chef-server-automate).\n\nChef Automate is not shipping with build-in profiles at the moment. To upload profiles, you can use the [Automate API](https://docs.chef.io/api_delivery.html) or the `inspec compliance` subcommands (requires InSpec 1.7.2 or newer).\n\nAttributes example of fetching from Automate, reporting to Automate both via Chef Server:\n\n```ruby\n\"audit\": {\n  \"reporter\": \"chef-server-automate\",\n  \"fetcher\": \"chef-server\",\n  \"insecure\": false,\n  \"profiles\": [\n    {\n      \"name\": \"my-profile\",\n      \"compliance\": \"john/my-profile\"\n    }\n  ]\n}\n```\n\n\n#### Direct reporting to Chef Compliance\n\nIf you want the audit cookbook to directly report to Chef Compliance, set the `reporter`, `server`, `owner`, `refresh_token` and `profiles` attributes.\n\n * `reporter` - 'chef-compliance' to report to Chef Compliance\n * `server` - url of Chef Compliance server with `/api`\n * `owner` - Chef Compliance user or organization that will receive this scan report\n * `refresh_token` - refresh token for Chef Compliance API (https://github.com/chef/inspec/issues/690)\n   * note: A UI logout revokes the refresh_token. Workaround by logging in once in a private browser session, grab the token and then close the browser without logging out\n * `insecure` - a `true` value will skip the SSL certificate verification when retrieving access token. Default value is `false`\n\n```ruby\n\"audit\": {\n  \"reporter\": \"chef-compliance\",\n  \"server\": \"https://compliance-fqdn/api\",\n  \"owner\": \"my-comp-org\",\n  \"refresh_token\": \"5/4T...g==\",\n  \"insecure\": false,\n  \"profiles\": [\n    {\n      \"name\": \"windows\",\n      \"compliance\": \"base/windows\"\n    }\n  ]\n}\n```\n\nInstead of a refresh token, it is also possible to use a `token` that expires in 12h after creation .\n\n```ruby\n\"audit\": {\n  \"reporter\": \"chef-compliance\",\n  \"server\": \"https://compliance-fqdn/api\",\n  \"owner\": \"my-comp-org\",\n  \"token\": \"eyJ........................YQ\",\n  \"profiles\": [\n    {\n      \"name\": \"windows\",\n      \"compliance\": \"base/windows\"\n    }\n  ]\n}\n```\n\n#### Direct reporting to Chef Automate\n\nIf you want the audit cookbook to directly report to Chef Automate, set the `reporter` attribute to 'chef-automate'. Also specify where to retrieve the `profiles` from.\n\n* `insecure` - a `true` value will skip the SSL certificate verification. Default value is `false`\n\nThis method is sending the report using the `data_collector.server_url` and `data_collector.token`, defined in `client.rb`. It requires `inspec` version `0.27.1` or greater. Further information is available at Chef Docs: [Configure a Data Collector token in Chef Automate](https://docs.chef.io/ingest_data_chef_automate.html)\n\n```ruby\n\"audit\": {\n  \"reporter\": \"chef-automate\",\n  \"insecure\": \"false\",\n  \"profiles\": [\n    {\n      \"name\": \"brewinc/tmp_compliance_profile\",\n      \"url\": \"https://github.com/nathenharvey/tmp_compliance_profile\"\n    }\n  ]\n}\n```\n\nIf you are using a self-signed certificate, please also read [how to add the Chef Automate certificate to the trusted_certs directory](https://docs.chef.io/setup_visibility_chef_automate.html#add-chef-automate-certificate-to-trusted-certs-directory)\n\nVersion compatibility matrix:\n\n| Automate version   | InSpec version   | Audit Cookbook version   |\n|--------------------|------------------|--------------------------|\n|   < 0.8.0          |   ≤ 1.23.0       |   ≤ 3.1.0                |\n|   ≥ 0.8.0          |   ≥ 1.24.0       |   ≥ 4.0.0                |\n\n\n#### Write to file on disk\n\nTo write the report to a file on disk, simply set the `reporter` to 'json-file' like so:\n\n```ruby\naudit: {\n  reporter: 'json-file',\n  profiles: [\n   {\n      'name': 'admin/ssh2',\n      'path': '/some/base_ssh.tar.gz'\n    }\n  ]\n}\n```\n\nThe resulting file will be written to `<chef_cache_path>/cookbooks/audit/inspec-<YYYYMMDDHHMMSS>.json`. The path will also be output to the Chef log:\n\n```\n[2017-08-29T00:22:10+00:00] INFO: Reporting to json-file\n[2017-08-29T00:22:10+00:00] INFO: Writing report to /opt/kitchen/cache/cookbooks/audit/inspec-20170829002210.json\n[2017-08-29T00:22:10+00:00] INFO: Report handlers complete\n```\n\n#### Multiple Reporters\n\nTo enable multiple reporters, simply define multiple reporters with all the necessary information\nfor each one.  For example, to report to chef-compliance and write to json file on disk:\n\n```ruby\n\"audit\": {\n  \"reporter\": [ \"chef-compliance\", \"json-file\" ]\n  \"server\": \"https://compliance-fqdn/api\",\n  \"owner\": \"my-comp-org\",\n  \"refresh_token\": \"5/4T...g==\",\n  \"insecure\": false,\n  \"profiles\": [\n    {\n      \"name\": \"windows\",\n      \"compliance\": \"base/windows\"\n    }\n  ]\n}\n```\n\n### Profile Fetcher\n\n#### Fetch profiles from Chef Automate/Chef Compliance via Chef Server\n\nTo enable reporting to Chef Automate with profiles from Chef Compliance or Chef Automate, you need to have Chef Server integrated with [Chef Compliance or Chef Automate](https://docs.chef.io/integrate_compliance_chef_automate.html#collector-chef-server-automate). You can then set the `fetcher` attribute to 'chef-server'.\nThis will allow the audit cookbook to fetch profiles stored in Chef Compliance. For example:\n\n```ruby\n\"audit\": {\n  \"fetcher\": \"chef-server\",\n  \"reporter\": \"chef-server-automate\",\n  \"profiles\": [\n    {\n      \"name\": \"ssh\",\n      \"compliance\": \"base/ssh\"\n    }\n  ]\n}\n```\n\n#### Fetch profiles directly from Chef Automate\n\nThis method is fetching profiles using the `data_collector.server_url` and `data_collector.token`, defined in `client.rb`. It requires `inspec` version `0.27.1` or greater. Further information is available at Chef Docs: [Configure a Data Collector token in Chef Automate](https://docs.chef.io/ingest_data_chef_automate.html)\n\n```ruby\n\"audit\": {\n  \"fetcher\": \"chef-automate\",\n  \"reporter\": \"chef-automate\",\n  \"profiles\": [\n    {\n      \"name\": \"ssh\",\n      \"compliance\": \"base/ssh\"\n    }\n  ]\n}\n```\n\n## Profile Upload to Compliance Server\n\nIn order to support build cookbook mode, the `compliance_profile` resource has an `upload` action that allows uploading a compressed\ninspec compliance profile to the Compliance Server.\n\nSimply include the `upload` recipe in the run_list, with attribute overrides for the `audit` hash like so:\n\n```ruby\naudit: {\n  server: 'https://compliance-server.test/api',\n  reporter: 'chef-compliance',\n  refresh_token: '21/XMEK3...',\n  profiles: [\n   {\n      'name': 'admin/ssh2',\n      'path': '/some/base_ssh.tar.gz'\n    }\n  ]\n}\n```\n\n## Relationship with Chef Audit Mode\n\nThe following tables compares the [Chef Client audit mode](https://docs.chef.io/ctl_chef_client.html#run-in-audit-mode) with this `audit` cookbook.\n\n|                                          | audit mode | audit cookbook |\n|------------------------------------------|------------|----------------|\n| Works with Chef Compliance               | No         | Yes            |\n| Execution Engine                         | [Serverspec](http://serverspec.org/) | [InSpec](https://github.com/chef/inspec) |\n| Execute InSpec Compliance Profiles       | No         | Yes            |\n| Execute tests embedded in Chef recipes   | Yes        | No             |\n\nEventually the `audit` cookbook will replace audit mode. The only drawback is that you will not be able to execute tests in Chef recipes, but since you will be running these tests in production, you will want to have a straightforward, consistent process by which you include these tests throughout your development lifecycle. Within Chef Compliance, this is a profile.\n\n### Migrating from audit mode to audit cookbook:\n\nWe will improve the migration and help to ease the process and to reuse existing audit mode test as much as possible. At this point of time, an existing audit-mode test like:\n\n```\ncontrol_group 'Check SSH Port' do\n  control 'SSH' do\n    it 'should be listening on port 22' do\n      expect(port(22)).to be_listening\n    end\n  end\nend\n```\n\ncan be re-written in InSpec as follows:\n\n```\n# rename `control_group` to `control` and use a unique identifier\ncontrol \"blog-1\" do\n  title 'Check SSH Port'  # add the title from `control_group`\n  # rename the old `control` to `describe`\n  describe 'SSH' do\n    it 'should be listening on port 22' do\n      expect(port(22)).to be_listening\n    end\n  end\nend\n```\n\nor even simplified to:\n\n```\ncontrol \"blog-1\" do\n  title 'SSH should be listening on port 22'\n  describe port(22) do\n    it { should be_listening }\n  end\nend\n```\n\n## Interval Settings\n\nIf you have long running audit profiles that you don't wish to execute on every chef-client run,\nyou can enable an interval:\n\n```\ndefault['audit']['interval']['enabled'] = true\ndefault['audit']['interval']['time'] = 1440 # once a day, the default value\n```\n\nThe time attribute is in minutes.\n\nYou can enable the interval and set the interval time, along with your desired profiles,\n in an environment or role like this:\n\n```json\n\n  \"audit\": {\n    \"profiles\": [\n      {\n        \"name\": \"ssh\",\n        \"compliance\": \"base/ssh\"\n      },\n      {\n        \"name\": \"linux\",\n        \"compliance\": \"base/linux\"\n      }\n    ],\n    \"interval\": {\n      \"enabled\": true,\n      \"time\": 1440\n    }\n  }\n\n```\n\n## Alternate Source Location for `inspec` Gem\n\nIf you are not able or do not wish to pull the `inspec` gem from rubygems.org,\nyou may specify an alternate source using:\n\n```\n# URI to alternate gem source (e.g. http://gems.server.com or filesytem location)\n# root of location must host the *specs.4.8.gz source index\ndefault['audit']['inspec_gem_source'] = 'http://internal.gem.server.com/gems'\n```\n\nPlease note that all dependencies to the `inspec` gem must also be hosted in this location.\n\n## Using Chef node data\n\nWhile it is recommended that InSpec profiles should be self-contained and not rely on external data unless\nnecessary, there are valid use cases where a profile's test may exhibit different behavior depending on\naspects of the node under test.\n\nThere are two primary ways to pass Chef data to the InSpec run via the audit cookbook.\n\n### Option 1: Explicitly pass necessary data (recommended)\n\nAny data added to the `node['audit']['attributes']` hash will be passed as individual InSpec attributes.\nThis provides a clean interface between the Chef run and InSpec profile, allowing for easy assignment\nof sane default values in the InSpec profile. This method is especially recommended if the InSpec profile\nis expected to be used outside of the context of the audit cookbook so it's extra clear to profile\nconsumers what attributes are necessary.\n\nIn a wrapper cookbook or similar, set your Chef attributes:\n\n```ruby\nnode.normal['audit']['attributes']['key1'] = 'value1'\nnode.normal['audit']['attributes']['debug_enabled'] = node['my_cookbook']['debug_enabled']\nnode.normal['audit']['attributes']['environment'] = node.chef_environment\n```\n\n... and then use them in your InSpec profile:\n\n```ruby\nenvironment = attribute('environment', description: 'The chef environment for the node', default: 'dev')\n\ncontrol 'debug-disabled-in-production' do\n  title 'Debug logs disabled in production'\n  desc 'Debug logs contain potentially sensitive information and should not be on in prod.'\n  impact 1.0\n\n  describe file('/path/to/my/app/config') do\n    its('content') { should_not include \"debug=true\" }\n  end\n\n  only_if { environment == 'production' }\nend\n```\n\n### Option 2: Use the chef node object\n\nIn the event where it is not practical to opt-in to pass certain attributes and data, the audit cookbook will\npass the Chef node object as an InSpec attribute named `chef_node`.\n\nWhile this provides the ability to write more flexible profiles, it makes it more difficult to reuse profiles\noutside of an audit cookbook run, requiring the profile user to know how to pass in a single attribute containing\nChef-like data. Therefore, it is recommended to use Option 1 whenever possible.\n\nTo use this option, first enable it in a wrapper cookbook or similar:\n\n```ruby\nnode.override['audit']['chef_node_attribute_enabled'] = true\n```\n\n... and then use it in your profile:\n\n```ruby\nchef_node = attribute('chef_node', description: 'Chef Node')\n\ncontrol 'no-password-auth-in-prod' do\n  title 'No Password Authentication in Production'\n  desc 'Password authentication is allowed in all environments except production'\n  impact 1.0\n\n  describe sshd_config do\n    its('PasswordAuthentication') { should cmp 'No' }\n  end\n\n  only_if { chef_node['chef_environment'] == 'production' }\nend\n```\n\n## Troubleshooting\n\nPlease refer to TROUBLESHOOTING.md.\n\nPlease let us know if you have any [issues](https://github.com/chef-cookbooks/audit/issues), we are happy to help.\n\n## Run the tests for this cookbook:\n\n```bash\nbundle install\nbundle exec rake style\n# run all ChefSpec tests\nbundle exec rspec\n# run a specific test\nbundle exec rspec ./spec/unit/libraries/automate_spec.rb\n```\n\n## How to release the `audit` cookbook\n\n* Cookbook source located here: (https://github.com/chef-cookbooks/audit)\n* Hosted Chef users(\"collaborators\") that can publish it to supermarket.chef.io: `apop`, `arlimus`, `chris-rock`, `sr`. Add more collaborators from `Supermarket>Manage Cookbook>Add Collaborator`\n\nReleasing a new cookbook version:\n\n1. version bump the metadata.rb and updated changelog (`bundle exec rake changelog`)\n2. Get your changes merged into master\n3. Go to the `audit` cookbook directory and pull from master\n4. Run `bundle install`\n5. Use stove to publish the cookbook(including git version tag). You must point to the private key of your hosted chef user. For example:\n\n  ```\n  bundle exec stove --username apop --key ~/git/chef-repo/.chef/apop.pem\n  ```\n\n## License\n\n|                      |                                          |\n|:---------------------|:-----------------------------------------|\n| **Author:**          | Stephan Renatus (<srenatus@chef.io>)\n| **Author:**          | Christoph Hartmann (<chartmann@chef.io>)\n| **Copyright:**       | Copyright (c) 2015 Chef Software Inc.\n| **License:**         | Apache License, Version 2.0\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n[cookbook]: https://supermarket.chef.io/cookbooks/audit\n[travis]: http://travis-ci.org/chef-cookbooks/audit\n","maintainer":"Chef Software, Inc.","maintainer_email":"cookbooks@chef.io","license":"Apache-2.0","platforms":{"amazon":">= 0.0.0","centos":">= 0.0.0","debian":">= 0.0.0","fedora":">= 0.0.0","oracle":">= 0.0.0","redhat":">= 0.0.0","suse":">= 0.0.0","opensuse":">= 0.0.0","opensuseleap":">= 0.0.0","ubuntu":">= 0.0.0","windows":">= 0.0.0"},"dependencies":{"compat_resource":">= 0.0.0"},"recommendations":{},"suggestions":{},"conflicting":{},"providing":{},"replacing":{},"attributes":{},"groupings":{},"recipes":{},"source_url":"https://github.com/chef-cookbooks/audit","issues_url":"https://github.com/chef-cookbooks/audit/issues","chef_version":[[">= 12.5.1"]],"ohai_version":[]}